<?php

/* this implements a hook_menu */
function kitchen_sink_menu() {
  $items = array();
  
  $items['kitchen-sink'] = array(
    'title' => 'Kitchen Sink Form Example',
    'page callback' => 'drupal_get_form',  /* if page is only a form, the callback can just be drupal_get_form */
    'page arguments' => array('kitchen_sink_example_form'), /* page argument is the form name */
    'access arguments' => array('access content'),
  );
  
  /* create a menu route for using the custom autocomplete */
  /* doesn't need a title since this doesn't actually get themed */
  /* it is just used to generate URL's of hamster names, for autocomplete */
  $items['kitchen-sink/autohamster'] = array(
    'page callback' => 'kitchen_sink_autocomplete_hamster',
        'access arguments' => array('access content'),
  );
  
  return $items;
}

/* function to return the form */
/* form definition function always has these first 2 parameters */
/* note: pass by reference: form_state */
/* form_state indicates if submitted */
function kitchen_sink_example_form($form, &$form_state) {
  
  /* fill in the form definition array */
  /* associated array of arrays */
  /* use the keys 'name',... later to retrieve the values */
  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield', /* single line field */
    '#required' => TRUE, /* displays a STAR and forces validation */
    '#default_value' => !empty($GLOBALS['user']->name) ? $GLOBALS['user']->name : '', /* set default value */
  );
  
  /* example of fieldset (group of fields) */
  $form['group_one'] = array(
    '#title' => t('Group One'),
    '#type' => 'fieldset',
  );
   
  /* values for dropdown box */
  /* use internal value and human-readable label */
  $departments = array(
    ''        => t('--Select a Department--'),
    'service' => t('Customer Service'),
    'hr'      => t('Human Resources'),    
    'it'      => t('Information Technology'),    
    'sales'   => t('Sales'),    
  );
  /* first element inside of form 'group_one' */
  $form['group_one']['department'] = array(
    '#title' => t('Department'),
    '#type' => 'select',  /* dropdoun box */
    '#options' => $departments,
    '#default_value' => 'it',  /* otherwise, the top item will be default */
  );
  
  /* second element inside of form 'group_one' */
  $form['group_one']['department_multi'] = array(
    '#title' => t('Departments (Multiselect)'),
    '#type' => 'select',  /* dropdoun box */
    '#options' => $departments,
    '#multiple' => TRUE,  /* allow for multiple selections */
    '#default_value' => array('it', 'service'),  /* default can be multiple selections */
  );
    
  $intervals = array(
    'hourly' => t('Hourly'),
    'daily' => t('Daily'),
    'weekly' => t('Weekly'),
    'monthly' => t('Monthly'), 
  );
        
  /* third element inside of form 'group_one' */
  $form['group_one']['receive_updates'] = array(
    '#title' => t('Receive Updates'),
    '#type' => 'checkboxes',
    '#options' => $intervals,
    '#default_value' => array('daily'),
  );
  
  
  
  /* second group is collapsible */
  $form['group_two'] = array(
    '#title' => t('Group Two'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );  
  
  /* single checkbox with title next to it */
  $form['group_two']['subscribe'] = array(
    '#type' => 'checkbox',
    '#title' => t('Subscribe to our newsletter'),
    '#default_value' => TRUE,
  );
 
  /* radio box, with array inline instead of as separate variable */
  $form['group_two']['gender'] = array(
    '#type' => 'radios',
    '#title' => t('Gender'),
    '#options' => array('male' => t('Male'), 'female' => t('Female')),
  );
  
  $form['group_two']['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#rows' => 5, /* number of rows before it starts scrolling */
    '#description' => t('Please enter a message here.'),
  );
  
  /* third group */
  $form['group_three'] = array(
    '#title' => t('Group Three'),
    '#type' => 'fieldset',
  );  
  
  /* attributes key allows you to put any HTML on input text */
  $form['group_three']['username'] = array(
    '#title' => t('Username'),
    '#type' => 'textfield',
    '#maxlength' => 10,
    '#size' => 30,
    '#attributes' => array('class' => array('kitchen-sink-highlight')), /* use special CSS class */
    '#description' => t('Your username can be a maximum of 10 characters'),
  );
  
  /* password type hides input */
  $form['group_three']['password'] = array(
    '#type' => 'password',
    '#title' => t('Simple Password'),
    '#description' => t('Please enter a password'),
  );
  
  /* password_confirm type displays Password strength. has 2 fields, checks that passwords match */
  $form['group_three']['password_two'] = array(
    '#type' => 'password_confirm',
    '#title' => t('Password (with confirm)'),
  );
    
  
  /* next group */
  $form['group_four'] = array(
    '#title' => t('Group Four'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    ); 
  
  /* fied prefix goes before the field */
  $form['group_four']['total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total'),
    '#field_prefix' => '$',
    '#size' => 10,
  );
    
  /* default weight is 0. 
   * default ordering is the order they are created
   * lower weights float up higher (within fieldset)
   */
  $form['group_four']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#field_suffix' => 'grams', /* field suffix puts label after the text field */
    '#size' => 10,
    '#weight' => -1,
  );
  
  /* prefix and suffix go above and below the field */
  $form['group_four']['order_notes'] = array(
    '#type' => 'textfield',
    '#title' => t('Order Notes'),
    '#prefix' => '<p>' . t('Enter any order notes below.') . '</p>',
    '#suffix' => '<p>' . t('Enter any order notes above.') . '</p>',
  );
  
  
  /* next group */
  $form['group_five'] = array(
    '#title' => t('Group Five'),
    '#type' => 'fieldset',
    ); 
  
  /* disabled: NOTE: submit handler doesn't return values for any disabled fields */
  $form['group_five']['disabled_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Disabled Text'),
    '#default_value' => t('This is some default text.'),
    '#disabled' => TRUE,
  );
  
  /* read-only, can be selected but not entered. submission will return the value */
  $form['group_five']['readonly_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Read-only Text'),
    '#default_value' => t('This is some default text.'),
    '#attributes' => array('readonly' => 'readonly'),
  );
  
  /* hidden doesn't show on page, but it WILL be shown in page source */
  $form['group_five']['secret_value'] = array(
    '#type' => 'hidden',
    '#value' => t('the secret password'),
  );
    
  /* type 'value' does not show up in HTML, but DOES get returned in submission */
  /* more secure than hidden */
  $form['group_five']['supersecret_text'] = array(
    '#type' => 'value',
    '#value' => t('the supersecret password'),
  );
          
  /* access FALSE hides it from user, similar to supersecret */
  /* more likely, access would be set based on the user account */
  /* admin user is uid=1 */
  $form['group_five']['topsecret_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Secret Password'),
    '#default_value' => t('the top secret password'),
    '#access' => ($GLOBALS['user']->uid == 1) ? TRUE : FALSE, /* give access to admin */
    /* '#access' => user_access('administer nodes'), */  /* give access to users who can edit nodes */
    );
    
  /* autocomplete */
  /* specify the URL to call to get list of possible results */
  /* this autocompletes based on valid user names because each username has a valud URL */
  $form['group_five']['user_ac'] = array(
    '#type' => 'textfield',
    '#title' => t('User Account'),
    '#autocomplete_path' => 'user/autocomplete',   
  );
      
  /* this uses the defined callback */
  /* custom autocomplete searches for hamster names */ 
  /* using a custom path. the path is created above by a hook menu with a page callback
   * that selects hamsters from the database
   */
  $form['group_five']['custom_ac'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Autocomplete'),
    '#autocomplete_path' => 'kitchen-sink/autohamster',   
  ); 
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Form'),
  );
  
  $form['othersubmit'] = array(
    '#type' => 'submit',
    '#value' => t('No. use me!'),
  );
  
  /* can insert HTML anywhere within the form */
  $form['finish_line'] = array(
    '#type' => 'markup',
    '#markup' => '<p><string>' . t('Congratulations!') .
                 '</string>' . t('You have made it to the end of the form.') .
                 '</p>',
  );
  
  /* attack a css to the form */
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'kitchen_sink') . '/kitchen_sink.css',
  );
  
  /* this causes values to be nested in form_state based on their fieldset.
   * default is all at top-level, which requires unique key values
   */
  /* can also set this for individual field-set */
  $form['#tree'] = TRUE;
  
  return $form;
}

/* use this for autocompletes */
function kitchen_sink_autocomplete_hamster($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('hamster')
      ->fields('hamster', array('name'))
      ->condition('name', db_like($string) . '%' , 'LIKE')
      ->range(0, 10)
      ->execute();
   foreach ($result as $user) {
     $matches[$user->name] = check_plain($user->name);
   }   
  }
  
  drupal_json_output($matches);
}

function kitchen_sink_example_form_submit($form, &$form_state) {
  dpm($form_state);
}